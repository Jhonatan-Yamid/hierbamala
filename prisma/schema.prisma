generator client {
  provider = "prisma-client-js"
   log      = ["query"]  // Esto habilita los logs de las consultas SQL
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Int?
}

model Ingredient {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  price       Int
  quantity    Float?
  typeUnity   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  Origin      String              @default("Desconocido")
  products    ProductIngredient[]
}

model Product {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  category    String              @default("Desconocida")
  ingredients ProductIngredient[]
  sales       SaleProduct[]
}

model ProductIngredient {
  productId    Int
  ingredientId Int
  quantity     Int
  createdAt    DateTime   @default(now())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])

  @@id([productId, ingredientId])
  @@index([ingredientId], map: "ProductIngredient_ingredientId_fkey")
}

model Sale {
  id               Int              @id @default(autoincrement())
  totalAmount      Float
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  status           String
  table            String
  generalObservation String?        // Observación general de la venta
  products         SaleProduct[]    // Relación con los productos vendidos
}

model SaleProduct {
  id          String    @id @default(cuid()) // Usamos cuid() para un id único por cada producto-venta
  saleId      Int
  productId   Int
  quantity    Int
  observation String?
  
  sale        Sale      @relation(fields: [saleId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([saleId, productId, observation]) // Aseguramos que cada combinación de venta-producto-observación sea única
}


model Provider {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  accountNumber String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Alert {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  alertTime   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Subscription {
  id            Int      @id @default(autoincrement())
  endpoint      String   @unique
  expirationTime DateTime?
  keys          Json
}