generator client {
  provider = "prisma-client-js"
  log      = ["query"]   // Esto habilita los logs de las consultas SQL
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Int?
}

model Ingredient {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Int
  quantity    Float?
  typeUnity   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  Origin      String            @default("Desconocido")
  products    ProductIngredient[]
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?           @db.Text
  price       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  category    String            @default("Desconocida")
  ingredients ProductIngredient[] // Relación con los ingredientes
  sales       SaleProduct[]     // Relación con las ventas
}

model ProductIngredient {
  productId    Int
  ingredientId Int
  quantity     Int
  createdAt    DateTime          @default(now())
  ingredient   Ingredient        @relation(fields: [ingredientId], references: [id])
  product      Product           @relation(fields: [productId], references: [id])

  @@id([productId, ingredientId])
  @@index([ingredientId], map: "ProductIngredient_ingredientId_fkey")
}

// *** AÑADIDO: Modelo para Juegos de Mesa ***
model Game {
  id    Int     @id @default(autoincrement())
  name  String  @unique // Nombre del juego de mesa
  // Puedes añadir más campos si necesitas:
  // description String?
  // minPlayers  Int?
  // maxPlayers  Int?
  sales Sale[] // Una relación para que un juego pueda tener varias ventas
}


model Sale {
  id                 Int      @id @default(autoincrement())
  totalAmount        Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  status             String
  table              String   // Cambiado a String para consistencia si es un identificador de mesa
  generalObservation String?  // Observación general de la venta
  gameId             Int?     // Clave foránea para el juego de mesa (puede ser nulo si no hay juego)
  game               Game?    @relation(fields: [gameId], references: [id]) // Relación con el modelo Game
  products           SaleProduct[] // Relación con los productos vendidos
  orderType        String    @default("En mesa")
}

model SaleProduct {
  id            String                @id @default(cuid()) // Usamos cuid() para un id único por cada producto-venta
  saleId        Int
  productId     Int
  quantity      Int
  observation   String?
  additions     SaleProductAddition[] // Relación con las adiciones

  sale          Sale                  @relation(fields: [saleId], references: [id])
  product       Product               @relation(fields: [productId], references: [id])

  @@unique([saleId, productId, observation]) // Aseguramos que cada combinación de venta-producto-observación sea única
}


model Provider {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  accountNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Alert {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  alertTime   DateTime
  repeatWeekly Boolean @default(false)   // Nuevo campo para indicar si es semanal
  repeatDay   Int?     // Representa el día de la semana (0=Domingo, 1=Lunes, ..., 6=Sábado)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Subscription {
  id            Int       @id @default(autoincrement())
  endpoint      String    @unique
  expirationTime DateTime?
  keys          Json
}

model SaleProductAddition {
  id            Int       @id @default(autoincrement())
  saleProductId String
  name          String
  price         Float
  additionId    Int?

  saleProduct   SaleProduct @relation(fields: [saleProductId], references: [id])

 // Si additionId se relaciona con Product, añade la relación aquí:
  // addition      Product?    @relation(fields: [additionId], references: [id])

  @@index([saleProductId])
  // Si usas additionId como relación, añade un index para él también
  // @@index([additionId])
}

model Utils {
  id        Int      @id @default(autoincrement())
  ipv4      String
  created_at DateTime @updatedAt
}