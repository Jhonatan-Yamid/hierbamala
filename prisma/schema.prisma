generator client {
  provider = "prisma-client-js"
  log      = ["query"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Alert {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  alertTime   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt // Ajustado
  repeatDay   Int?
  repeatWeekly Boolean @default(false)
}

model Game {
  id    Int    @id @default(autoincrement())
  name  String @unique
  sales Sale[] // Ajustado
}

model Ingredient {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Int
  quantity    Float?
  typeUnity   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt // Ajustado
  Origin      String            @default("Desconocido")
  products    ProductIngredient[] // Ajustado
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?           @db.Text
  price       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt // Ajustado
  category    String            @default("Desconocida")
  ingredients ProductIngredient[] // Ajustado
  sales       SaleProduct[]     // Ajustado
}

model ProductIngredient {
  productId    Int
  ingredientId Int
  quantity     Int
  createdAt    DateTime   @default(now())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id]) // Ajustado
  product      Product    @relation(fields: [productId], references: [id])    // Ajustado

  @@id([productId, ingredientId])
  @@index([ingredientId], map: "ProductIngredient_ingredientId_fkey")
}

model Provider {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  accountNumber String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt // Ajustado
}

model Sale {
  id                 Int         @id @default(autoincrement())
  totalAmount        Float
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt // Ajustado
  status             String
  table              String
  generalObservation String?
  gameId             Int?
  orderType          String      @default("En mesa")
  game               Game?       @relation(fields: [gameId], references: [id]) // Ajustado
  products           SaleProduct[] // Ajustado

  @@index([gameId], map: "Sale_gameId_fkey")
}

model SaleProduct {
  id            String            @id @default(cuid()) // Ajustado
  saleId        Int
  productId     Int
  quantity      Int
  observation   String?           // Confirmado

  additions     SaleProductAddition[]

  product       Product           @relation(fields: [productId], references: [id]) // Ajustado
  sale          Sale              @relation(fields: [saleId], references: [id])    // Ajustado

  // Las líneas @@index con "_temp_" fueron eliminadas aquí
}

model SaleProductAddition {
  id          Int         @id @default(autoincrement())
  saleProductId String
  name        String
  price       Float
  additionId  Int?
  saleProduct SaleProduct @relation(fields: [saleProductId], references: [id]) // Ajustado

  @@index([saleProductId])
}

model Subscription {
  id             Int       @id @default(autoincrement())
  endpoint       String    @unique
  expirationTime DateTime?
  keys           Json      // Ajustado
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Ajustado
  role      Int?
}

model Utils {
  id         Int      @id @default(autoincrement())
  ipv4       String
  created_at DateTime @updatedAt // Ajustado
}